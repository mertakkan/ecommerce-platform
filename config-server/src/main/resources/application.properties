# ----------------------------------------
# SERVER CONFIGURATION
# ----------------------------------------
# Sets the port on which the Config Server will run. 8888 is a common convention.
server.port=8888

# ----------------------------------------
# APPLICATION IDENTIFICATION
# ----------------------------------------
# Gives a unique name to this microservice. This is crucial for service discovery and logging.
spring.application.name=config-server

# ----------------------------------------
# CONFIG SERVER GIT REPOSITORY
# ----------------------------------------
# This is the core setting. It tells the Config Server where to find the configuration files.
# For local development, we point it to a Git repository on our local filesystem.
# The ${user.home} variable is a system property that resolves to your home directory (e.g., /Users/your-username or C:\Users\your-username).
spring.cloud.config.server.git.uri=file://${user.home}/ecommerce-config-repo

# --- ALTERNATIVE: For a remote repository (e.g., on GitHub) you would use this instead ---
# spring.cloud.config.server.git.uri=https://github.com/your-username/ecommerce-config-repo.git
# spring.cloud.config.server.git.username=your-github-username
# spring.cloud.config.server.git.password=your-github-personal-access-token

# ----------------------------------------
# MONITORING & MANAGEMENT (ACTUATOR)
# ----------------------------------------
# Exposes specific actuator endpoints over HTTP for health checks and monitoring.
# By default, only the /health endpoint is exposed in Spring Boot 3. We explicitly expose a few more.
management.endpoints.web.exposure.include=health,info,metrics,env